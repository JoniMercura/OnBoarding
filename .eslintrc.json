// Why not to use linters as formatters : https://typescript-eslint.io/linting/troubleshooting/formatting/
// Eslint deprecating formatting rules : https://eslint.org/blog/2023/10/deprecating-formatting-rules/
// We will still use eslint for all rules that does not have automatic formatting, while stylistic should handle rules can be formatted.
{
	"env": {
		"browser": true,
		"es2021": true
	},
	"extends": [
		"eslint:recommended",
		"plugin:react/recommended",
		"plugin:tailwindcss/recommended",
		"plugin:@stylistic/disable-legacy"
	],
	"overrides": [],
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"ecmaVersion": "latest",
		"sourceType": "module"
	},
	"plugins": [
		"react",
		"prefer-arrow",
		"eslint-plugin-tailwindcss",
		// The stylistic plugin takes over formatting rules of eslint, as they have change focus because linting should not be about formatting. 
		// But we will still use stylistic to format where possible, to ensure we dont lose formatting when rules are deprecated in eslint.
		"@stylistic",
		"@typescript-eslint"
	],
	"settings": {
		"react": {
			"version": "detect"
		}
	},
	"globals": {
		"JSX": true
	},
	"ignorePatterns": [
		"*.cjs",
		"build/*"
	],
	"rules": {
		/* ## Comment from stack overflow ## 
		* https://stackoverflow.com/questions/69231333/eslint-configuration-with-typescript-jsx
		*
		* We strongly recommend that you do not use the no-undef lint rule on TypeScript projects. 
		* The checks it provides are already provided by TypeScript without the need for configuration - TypeScript just does this significantly better.
		* As of our v4.0.0 release, this also applies to types. 
		* If you use global types from a 3rd party package (i.e. anything from an @types package), then you will have to configure ESLint appropriately to define these global types.
		* For example; the JSX namespace from @types/react is a global 3rd party type that you must define in your ESLint config.
		*/
		"no-undef": "off",
		// Alot of these rules are inspired by : https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/rules/react.js
		// Enforce consistent indentation
		// https://eslint.org/docs/latest/rules/indent
		"@stylistic/indent": [
			"error",
			"tab",
			{
				"SwitchCase": 1
			}
		],
		// Enforce the consistent use of either backticks, double, or single quotes
		// https://eslint.org/docs/latest/rules/quotes
		"@stylistic/quotes": [
			"error",
			"double"
		],
		// Require or dissallow semicolons instead of ASI
		// https://eslint.org/docs/latest/rules/semi
		"@stylistic/semi": [
			"error",
			"always"
		],
		// Show errors for console logs, unless they are warnings or errors
		// https://eslint.org/docs/latest/rules/no-console
		"no-console": [
			"error",
			{
				"allow": [
					"warn",
					"error"
				]
			}
		],
		// Disallow multiple spaces
		// https://eslint.org/docs/latest/rules/no-multi-spaces
		"@stylistic/no-multi-spaces": "error",
		// Dissalow trailing whitespaces at the end of lines
		// https://eslint.org/docs/latest/rules/no-trailing-spaces
		"@stylistic/no-trailing-spaces": [
			"error",
			{
				"skipBlankLines": true
			}
		],
		// Disallow empty functions
		// https://eslint.org/docs/latest/rules/no-empty-function
		"no-empty-function": [
			"warn",
			{
				"allow": [
					"arrowFunctions"
				]
			}
		],
		// Disallow multiple spaces between inline JSX props
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/ac102885765be5ff37847a871f239c6703e1c7cc/docs/rules/jsx-props-no-multi-spaces.md
		"react/jsx-props-no-multi-spaces": "error",
		// Prevent missing React when using JSX
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md
		"react/react-in-jsx-scope": "off",
		// Prevent usage of unknown DOM property. This can be turned off, since Typescript will handle any unknown properties correctly.
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md
		"react/no-unknown-property": "off",
		// Prevent usage of Array index in keys
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md
		"react/no-array-index-key": "error",
		// Prevent using string references
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md
		"react/no-string-refs": "error",
		// Prevent missing parentheses around multilines JSX
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/jsx-wrap-multilines.md
		"react/jsx-wrap-multilines": [
			"error",
			{
				"declaration": "parens-new-line",
				"assignment": "parens-new-line",
				"return": "parens-new-line",
				"arrow": "parens-new-line",
				"condition": "parens-new-line",
				"logical": "parens-new-line",
				"prop": "parens-new-line"
			}
		],
		// Require that the first prop in a JSX element be on a new line when the element is multiline
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md
		"react/jsx-first-prop-new-line": [
			"error",
			"multiline-multiprop"
		],
		// Enforce spacing around jsx equals signs
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-equals-spacing.md
		"react/jsx-equals-spacing": [
			"error",
			"never"
		],
		// Prevent extra closing tags for components without children
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md
		"react/self-closing-comp": "error",
		// Validate closing bracket location in JSX
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md
		"react/jsx-closing-bracket-location": [
			"error",
			"line-aligned"
		],
		// Validate closing tag location in JSX
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md
		"react/jsx-closing-tag-location": "error",
		// Validate whitespace in and around the JSX opening and closing brackets
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/jsx-tag-spacing.md
		"react/jsx-tag-spacing": [
			"warn",
			{
				"closingSlash": "never",
				"beforeSelfClosing": "always",
				"beforeClosing": "never",
				"afterOpening": "never"
			}
		],
		// Enforce or disallow spaces inside of curly braces in JSX attributes
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md
		"react/jsx-curly-spacing": [
			"error",
			{
				"when": "never",
				"attributes": {
					"allowMultiline": false
				},
				"children": true
			}
		],
		// Prevent multiple component definition per file
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md
		"react/no-multi-comp": [
			"warn",
			{
				"ignoreStateless": true
			}
		],
		// Forbid certain propTypes (any, array, object)
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/843d71a432baf0f01f598d7cf1eea75ad6896e4b/docs/rules/forbid-prop-types.md
		"react/forbid-prop-types": [
			"warn"
		],
		// Enforce PascalCase for user-defined JSX components
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md
		"react/jsx-pascal-case": [
			"error",
			{
				"allowAllCaps": false,
				"ignore": []
			}
		],
		// Enforce only .tsx extensions contain JSX components
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md
		"react/jsx-filename-extension": [
			"error",
			{
				"extensions": [
					".tsx"
				]
			}
		],
		// Enforce boolean attributes notation in JSX
		// https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md
		"react/jsx-boolean-value": [
			"error",
			"never"
		],
		// Order classnames for consistency and it makes merge conflict a bit easier to resolve
		// https://github.com/francoismassart/eslint-plugin-tailwindcss/blob/HEAD/docs/rules/classnames-order.md
		"tailwindcss/classnames-order": "warn",
		// Make sure to use negative arbitrary values classname without the negative classname e.g. -top-[5px] should become top-[-5px]
		// https://github.com/francoismassart/eslint-plugin-tailwindcss/blob/HEAD/docs/rules/enforces-negative-arbitrary-values.md
		"tailwindcss/enforces-negative-arbitrary-values": "error",
		// Merge multiple classnames into shorthand if possible e.g. mx-5 my-5 should become m-5
		// https://github.com/francoismassart/eslint-plugin-tailwindcss/blob/HEAD/docs/rules/enforces-shorthand.md
		"tailwindcss/enforces-shorthand": "warn",
		// Avoid contradicting Tailwind CSS classnames 
		// https://github.com/francoismassart/eslint-plugin-tailwindcss/blob/HEAD/docs/rules/no-contradicting-classname.md
		"tailwindcss/no-contradicting-classname": "error",
		// Enforce "for" loop update clause moving the counter in the right direction
		// https://eslint.org/docs/latest/rules/for-direction
		"for-direction": "error",
		// Disallow await inside of loops
		// https://eslint.org/docs/latest/rules/no-await-in-loop
		"no-await-in-loop": "error",
		// Disallow comparing against -0
		// https://eslint.org/docs/latest/rules/no-compare-neg-zero
		"no-compare-neg-zero": "error",
		// Disallow assignment operators in conditional expressions
		// https://eslint.org/docs/latest/rules/no-cond-assign
		"no-cond-assign": "error",
		// Disallow reassigning const variables
		// https://eslint.org/docs/latest/rules/no-const-assign
		"no-const-assign": "error",
		//Disallow expressions where the operation doesn't affect the value
		// https://eslint.org/docs/latest/rules/no-constant-binary-expression
		"no-constant-binary-expression": "error",
		// Disallow constant expresssions in conditions
		// https://eslint.org/docs/latest/rules/no-constant-condition
		"no-constant-condition": "off",
		// Disallow duplicate arguments in function definitions
		// https://eslint.org/docs/latest/rules/no-dupe-args
		"no-dupe-args": "error",
		// Disallow duplicate module imports
		// https://eslint.org/docs/latest/rules/no-duplicate-imports
		"no-duplicate-imports": "error",
		// Disallow fallthrough of case statements
		// https://eslint.org/docs/latest/rules/no-fallthrough
		"no-fallthrough": "error",
		// Disallow unreachable code after return, throw, continue, and break statements
		// https://eslint.org/docs/latest/rules/no-unreachable
		"no-unreachable": "error",
		// Disallow loops with a body that allows only one iteration
		// https://eslint.org/docs/latest/rules/no-unreachable-loop
		"no-unreachable-loop": "error",
		// Disallow negating the left operand of relational operators
		// https://eslint.org/docs/latest/rules/no-unsafe-negation
		"no-unsafe-negation": "warn",
		// Disallow unused variables
		// https://eslint.org/docs/latest/rules/no-unused-vars
		"no-unused-vars": "off", // dissallow normal rule, as typescript-eslint will handle this better
		"@typescript-eslint/no-unused-vars": "warn",
		// no-use-before-define
		// https://eslint.org/docs/latest/rules/no-use-before-define
		// set to off, to not intefere with typescript-eslint
		"no-use-before-define": "off",
		// set functions to false, as it allows multiple components in one file
		"@typescript-eslint/no-use-before-define": [
			"error",
			{
				"functions": false,
				"allowNamedExports": true
			}
		],
		// Require calls to isNaN() when checking for NaN
		// https://eslint.org/docs/latest/rules/use-isnan
		"use-isnan": "error",
		// Enforce camelcase naming convention
		// https://eslint.org/docs/latest/rules/camelcase
		"camelcase": [
			"warn",
			{
				"properties": "always",
				"ignoreImports": true
			}
		],
		// Enforce a maximum cyclomatic complexity allowed in a program (Can be set if needed)
		// https://eslint.org/docs/latest/rules/complexity
		"complexity": "off",
		// Enforce a maximum depth that blocks can be nested
		// https://eslint.org/docs/latest/rules/max-depth
		"max-depth": "off",
		// Enforce consistent brace style for all control statements
		// https://eslint.org/docs/latest/rules/curly
		// Currently only error if a single line control statement is multi-lined without braces
		"curly": [
			"error",
			"multi-line",
			"consistent"
		],
		// Enforce dot notation whenever possible
		// https://eslint.org/docs/latest/rules/dot-notation
		"dot-notation": "warn",
		// Require the use of === and !==
		// https://eslint.org/docs/latest/rules/eqeqeq
		"eqeqeq": "warn",
		// Enforce the consistent use of either function declarations or expressions
		// https://eslint.org/docs/latest/rules/func-style
		"func-style": [
			"error",
			"declaration",
			{
				"allowArrowFunctions": true
			}
		],
		// Prefers arrow functions over other functions
		// https://www.npmjs.com/package/eslint-plugin-prefer-arrow
		"prefer-arrow/prefer-arrow-functions": [
			"error",
			{
				"allowStandaloneDeclarations": true
			}
		],
		// Disallow shorthand type conversions
		// https://eslint.org/docs/latest/rules/no-implicit-coercion
		"no-implicit-coercion": "warn",
		// Disallow unnecessary nested blocks
		// https://eslint.org/docs/latest/rules/no-lone-blocks
		"no-lone-blocks": "error",
		// Disallow if statements as the only statement in else blocks
		// https://eslint.org/docs/latest/rules/no-lonely-if
		"no-lonely-if": "error",
		// Dissallow nested ternary expressions
		// https://eslint.org/docs/latest/rules/no-nested-ternary
		"no-nested-ternary": "warn",
		// Disallow new operators outside of assignments or comparisons
		// https://eslint.org/docs/latest/rules/no-new
		"no-new": "error",
		// Disallow redundant return statements
		// https://eslint.org/docs/latest/rules/no-useless-return
		"no-useless-return": "warn",
		// Require or dissallow "Yoda" conditions
		// https://eslint.org/docs/latest/rules/yoda
		"yoda": "warn",
		// Enforce sorted import declarations within modules
		// https://eslint.org/docs/latest/rules/sort-imports
		// Is disabled, as it should not be required. Though this can be fixed automatically, so it could be enabled.
		"sort-imports": "off",
		// Enforce uniform spacing around type annotations improves the readability of the code. 
		// https://eslint.style/rules/ts/type-annotation-spacing
		"@stylistic/type-annotation-spacing": "error",
		// https://eslint.style/rules/js/keyword-spacing
		// Ensure uniform spacing around keywords such as if, else and more. Default is a space before and after.
		"@stylistic/keyword-spacing": "error",
		// Ensure spaces around infix operators such as +, -, *, /, %...
		// https://eslint.style/rules/js/space-infix-ops
		"@stylistic/space-infix-ops": "error",
		// Ensure consistent new lines when making arrays
		// https://eslint.style/rules/js/array-bracket-newline
		"@stylistic/array-bracket-newline": [
			"error",
			"consistent"
		],
		// Ensure no spacing is made inside of array brackets
		// https://eslint.style/rules/js/array-bracket-spacing
		"@stylistic/array-bracket-spacing": [
			"error",
			"never"
		],
		// Add paraenthesis around arrow functions parameters only when needed
		// https://eslint.style/rules/js/arrow-parens
		"@stylistic/arrow-parens": [
			"warn",
			"as-needed"
		],
		// Add spacing before and after arrow in arrow functions
		// https://eslint.style/rules/js/arrow-spacing
		"@stylistic/arrow-spacing": [
			"error",
			{
				"before": true,
				"after": true
			}
		],
		"no-restricted-syntax": [
			"warn",
			{
				"selector": "TSEnumDeclaration",
				"message": "Don't declare enums. Use `as const` objects or string unions instead."
			}
		]
	}
}